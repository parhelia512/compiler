(** 
 * 9. Concurrency-Activities-Protocols
 * 9.3. Barrier-Controlled-Activities
 *
 * Positive test: Execution oriented example
 *)
module {protected} Main;
import System.Threading;

(*
   Note:
    The idea of this test is to check if subactivities 
    are terminated within the blocks they are initialised.

    We have 3 activities that set global flag into 1 
    in several miliseconds after its execution.
*)

var
	a1, a2, a3 : integer; (* flags *)

activity Activity3;
begin
	await 500;
	a3 := 1
end Activity3;

activity Activity2;
begin
	await 100;
	do {barrier}
		new Activity3
	end; (* Will wait for Activity 3 *)
	a2 := 1
end Activity2;

activity Activity1;
begin		
	new Activity2;
	await 100;
	a1 := 1
end Activity1;

var 
	sum : integer;
begin
	a1 := 0;
	a2 := 0;
	a3 := 0;

	new Activity1;
	await 200;
	sum := a1 + a2 + a3; (* should be a1=1, a2=a3=0 => sum=1 *)

	(* Activity has been activated. 
	   But activity will late with initializing.
	   Value should be old. *)
	if sum = 1 then (* it is OK *)
		halt(1)  (* success *)
	else
		halt(0) (* failure *)
	end;
end Main.
