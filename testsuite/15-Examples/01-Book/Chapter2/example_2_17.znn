(* ********* Zonnon online collection ***********
 * Distribute (Chapter 2, Example 2.17)
 *
 * This example is a part of Prof. Nikalus Wirth's book
 * www.zonnon.ethz.ch/usergroup
 * (c) ETH Zurich 
 *)

module FileSystem;
   const MaxLength = 4096;
   object {value, public} Sequence;
      var {public}
          pos, length: integer;
          eof: boolean;
          a: array MaxLength of integer; 
   end Sequence;

   procedure {public} Open(var f:Sequence);
   begin
      f.length := 0;
      f.pos := 0;
      f.eof := false;
   end Open;

   procedure {public} WriteInt(var f:Sequence; w:integer);
   begin
      if f.pos < MaxLength then
         f.a[f.pos] := w; f.pos := f.pos+1; f.length := f.pos;
      else
         halt(0);
      end;
   end WriteInteger;

   procedure {public} Reset(var f:Sequence);
   begin
      f.pos := 0; f.eof := false;
   end Reset;

   procedure {public} ReadInt(var f:Sequence; var w:integer);
   begin
      if f.pos = f.length then f.eof := true; w:=-1;
      else w:= f.a[f.pos]; f.pos := f.pos + 1;
      end;
   end ReadInteger;

   procedure {public} Close(var f:Sequence);
   begin
      (* nothing to do *)
   end Close;
end FileSystem.

(**************************************************)
(**************************************************)


module Distribute; 
import FileSystem;


const  M = 16; MH = M div 2;
type item = integer;
var L,R,count,x: integer;
    H: array M of item; 
    f0, f1: FileSystem.Sequence;

procedure Select;
begin 
   count := count + 1;
end Select;

procedure Sift(L,R:integer);
var i,j: integer; x: item;
begin
  i:=L; j := 2*L; x:= H[L];
   if (j< R) & (H[j] > H[j+1]) then j := j+1; end;
   while (j <= R ) & (x > H[j]) do
      H[i] := H[j]; i := j; j := 2*j;
      if(j < R)&(H[j] > H[j+1]) then j := j + 1; end;
   end;
   H[i] := x;
end Sift;

procedure OpenRandomSeq(var s: FileSystem.Sequence; alength, seed: integer);
var i: integer;
begin 
   FileSystem.Open(s);
   for i := 0 to alength - 1 do
      FileSystem.WriteInt(s, seed); seed := (31*seed) mod 997 + 5;
   end;
end OpenRandomSeq;

procedure List(var s: FileSystem.Sequence);
var i, L:integer;
begin FileSystem.Reset(s); i:=0; L:= s.length;
   while i < L do
      write(s.a[i]:6); i:= i+1;
      if i mod 10 = 0 then writeln end;
   end;
   writeln;
end List;

begin
   count := 0;
   OpenRandomSeq(f0, 20, 991); List(f0);
   FileSystem.Open(f1); FileSystem.Reset(f0);
   Select;

   (* Step 1: filling the top *)
   L := M - 1;
   repeat FileSystem.ReadInt(f0, H[L]); L:= L-1;
   until L = MH - 1;
 
   (* Step 2: filling the bottum *)
   repeat FileSystem.ReadInt(f0, H[L]); Sift(L,M - 1); L:= L-1;
   until L = - 1;

   (* Step 3 *)
   L := M - 1; FileSystem.ReadInt(f0,x);
   while ~f0.eof do
      FileSystem.WriteInt(f1, H[0]);
      if H[0] <= x then
         H[0] := x; Sift(0,L);
      else (* next session *)
         H[0] := H[L]; Sift(0, L-1); H[L] := x;
         if L < MH then Sift(L,M - 1); end;
         L := L-1;
         if L = 0 then
            L := M - 1; Select;
         end;
      end;
      FileSystem.ReadInt(f0, x); 
   end;
   R := M - 1;
   repeat
      FileSystem.WriteInt(f1, H[0]); 
      H[0] := H[L]; Sift(0, L-1); H[L] := H[R]; R := R - 1;
      if L < MH then Sift(L,R) end;
      L := L-1;
   until L = - 1;

  (* step 5 *)
  Select;
  while R > 0 do
     FileSystem.WriteInt(f1, H[0]); H[0] := H[R]; R := R-1; Sift(0,R);
  end;
  List(f1);
  FileSystem.Close(f0);
  FileSystem.Close(f1);
end Distribute.
     