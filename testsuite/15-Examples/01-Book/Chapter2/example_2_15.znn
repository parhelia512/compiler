(* ********* Zonnon online collection ***********
 * Sorting: Balanced merge  (Chapter 2, Example 2.15)
 * Note:
 *    Two additional modules have been attaced 
 *    just with idea not to use them externally
 *
 * This example is a part of Prof. Nikalus Wirth's book
 * www.zonnon.ethz.ch/usergroup
 * (c) ETH Zurich 
 *)

module FileSystem;
   const MaxLength = 4096;
   object {value, public} Sequence;
      var {public}
          pos, length: integer;
          eof: boolean;
          a: array MaxLength of integer; (* word? *)
   end Sequence;

   procedure {public} Open(var f:Sequence);
   begin
      f.length := 0;
      f.pos := 0;
      f.eof := false;
   end Open;

   procedure {public} WriteInt(var f:Sequence; w:integer);
   begin
      if f.pos < MaxLength then
         f.a[f.pos] := w; f.pos := f.pos+1; f.length := f.pos;
      else
         halt(0);
      end;
   end WriteInteger;

   procedure {public} Reset(var f:Sequence);
   begin
      f.pos := 0; f.eof := false;
   end Reset;

   procedure {public} ReadInt(var f:Sequence; var w:integer);
   begin
      if f.pos = f.length then f.eof := true; w:=-1;
      else w:= f.a[f.pos]; f.pos := f.pos + 1;
      end;
   end ReadInteger;

   procedure {public} Close(var f:Sequence);
   begin
      (* nothing to do *)
   end Close;
end FileSystem.



module Sequences;
   import FileSystem;
   object {value, public} Sequence;
      var {public} first: integer;
          eor, eof: boolean;
          f: FileSystem.Sequence;
   end Sequence;

   procedure {public} OpenSeq(var s: Sequence);
   begin FileSystem.Open(s.f);
   end OpenSeq;

   procedure {public} OpenRandomSeq(var s:Sequence; length, seed: integer);
   var i: integer;
   begin
      FileSystem.Open(s.f);
      for i:=0 to length-1 do
         FileSystem.WriteInt(s.f, seed); seed := (31 * seed) mod 997 + 5;
      end;
   end OpenRandomSeq;

   procedure {public} StartRead(var s:Sequence);
   begin
      FileSystem.Reset(s.f); 
      FileSystem.ReadInt(s.f, s.first); 
      s.eof := s.f.eof;
   end StartRead;

   procedure {public} StartWrite(var s:Sequence);
   begin
      FileSystem.Reset(s.f);
      s.f.length := 0;
   end StartWrite;

   procedure {public} Copy(var x, y:Sequence);
   begin
      y.first := x.first;
      if ~x.eof then
        FileSystem.WriteInt(y.f,y.first); 
        FileSystem.ReadInt(x.f, x.first);
      end;
      x.eof := x.f.eof;
      x.eor := x.eof or (x.first < y.first);
   end Copy;

   procedure {public} CopyRun(var x,y:Sequence); 
   begin
     repeat Copy(x,y);
     until x.eor;
   end CopyRun;

   procedure {public} CloseSeq(var s: Sequence);
   begin
      FileSystem.Close(s.f);
   end CloseSeq;

   procedure {public} ListSeq(var s:Sequence);
   var i,L: integer;
   begin
      FileSystem.Reset(s.f); i:=0; L:=s.f.length;
      while i<L do
         write(s.f.a[i]:6); i := i + 1;
         if i mod 10 = 0 then writeln; end;
      end;
      writeln;
   end ListSeq;

end Sequences.




(**************************************************)
(**************************************************)

module BalancedMerge;
import Sequences;

const N = 4; Nh = N div 2;
var i,j, mx,tx, L, k1, k2: integer;
    min,x: integer;
    t,ta: array N of integer;
    f0: Sequences.Sequence;
    f: array N of Sequences.Sequence;

begin
   Sequences.OpenRandomSeq(f0, 100, 737); Sequences.ListSeq(f0);
   for i:= 0 to N-1 do Sequences.OpenSeq(f[i]); end;
   (* starter series *)
   for i:= 0 to Nh-1 do Sequences.StartWrite(f[i]) end;
   j := Nh; L := 0; Sequences.StartRead(f0);
   repeat
      if j < Nh - 1 then j:= j+1 else j := 0;  end;
      repeat Sequences.Copy(f0, f[j]) until f0.eor;
      L := L+1;
   until f0.eof;
   for i := 0 to N - 1 do t[i] := i end;
   repeat
      if L < Nh - 1 then k1 := L - 1; else  k1 := Nh - 1; end;
      for i := 0 to k1 do
        Sequences.StartRead(f[t[i]]); ta[i] := t[i];
      end;
      L := 0;
      j := Nh;
      repeat
         L := L+1; k2 := k1;
         repeat
            i := 0; mx := 0; min := f[ta[0]].first;
            while i < k2 do
               i := i+1; x:= f[ta[i]].first;
               if x < min then min := x; mx := i; end;
            end;
            Sequences.Copy(f[ta[mx]], f[t[j]]);
            if f[ta[mx]].eof then
               Sequences.StartWrite(f[ta[mx]]); ta[mx] := ta[k2];
               ta[k2] := ta[k1]; k1 := k1-1; k2 := k2 - 1;
            elsif f[ta[mx]].eor then
               tx := ta[mx]; ta[mx] := ta[k2]; ta[k2] := tx; k2 := k2 -1;
            end;
         until k2 = -1;
         if j < N - 1 then j:= j+1 else j:= Nh end;
      until k1 = - 1;
      for i := 0 to Nh - 1 do
         tx := t[i]; t[i] := t[i+Nh]; t[i+Nh] := tx;
      end;
   until L = 1;
   Sequences.ListSeq(f[t[0]]);
end BalancedMerge.
