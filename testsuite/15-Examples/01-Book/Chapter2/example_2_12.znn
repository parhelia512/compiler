(* ********* Zonnon online collection ***********
 * Sorting: Find K (Chapter 2, Example 2.10)
 * This example is a part of Prof. Nikalus Wirth's book
 * www.zonnon.ethz.ch/usergroup
 * (c) ETH Zurich 
 *)

module Sorting;
    const MAX_SIZE = 20;

    type ElementOfArray = integer;
    type DefaultArray = array MAX_SIZE of ElementOfArray;
    var MyArray: DefaultArray;

    (***** Implementation *****)
    
    object { value } StackElement;
    var { public }
        L,R : integer;
    end StackElement;
	
    procedure Find(var a: DefaultArray; n:integer; k:integer);
    var L, R, i, j: integer; w, x: ElementOfArray;
    begin 
       L := 0; R := n - 1;
       while L < R do
          x := a[k]; i := L; j := R;
          repeat
             while a[i] < x do i := i + 1; end;
             while x < a[j] do j := j - 1; end;
             if i <= j then w := a[i]; a[i] := a[j]; a[j] := w; 
			    i := i + 1; j := j - 1; 
             end;
          until i > j;
          if j < k then L := i; end;
          if k < i then R := j; end;
		end;
    end Find;

    (***** Example support *****)

    procedure FillTheArray;
    var i:integer;
    begin
      for i := 0 to MAX_SIZE - 1 do 
        MyArray[i] := abs( 10 - i ); 
      end; 
    end FillTheArray;
 
    procedure PrintTheArray;
    var i:integer;
    begin
       writeln("Array:");
       for i := 0 to MAX_SIZE - 1 do
          write( MyArray[i]:2, ', ' ); 
       end; 
       writeln;
    end PrintTheArray;
    
    procedure Execute;
    begin
       Find(MyArray, MAX_SIZE, 5); 
    end Execute;
begin
 writeln("Example 2.12 (Find k)");
 FillTheArray;
 PrintTheArray;
 Execute;
 PrintTheArray;
 writeln("Type 'q' to exit");	
end Sorting.
