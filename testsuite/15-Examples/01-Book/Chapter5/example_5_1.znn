(* ********* Zonnon online collection ***********
 * XRef (Chapter 5, Example 5.1)
 *
 * This example is a part of Prof. Nikalus Wirth's book
 * www.zonnon.ethz.ch/usergroup
 * (c) ETH Zurich 
 *)

module XRef;   (*NW 28.6.04*)

	const 	_P = 997;   (* prime, table size *)
	        WordLen = 20;
		nof = 16;  (* max no of occurrences of a word *)
	type mystring = array WordLen of char;

	var P:integer; (* Because of error in compiler *)

	object { value, public } Item;
	   var { public }
		key: mystring;
		n: integer;
		lno: array nof of integer;

		i:integer;
	begin
	        for i:=0 to WordLen-1 do key[i] := 0X; end;
	end Item;


	object { public, ref } Table;
	   var { public }
                Content: array _P of Item;

		i:integer;
        begin
 		for i:= 0 to _P-1 do Content[i] := new Item; end; (* Because of problems with compiler*)
        end Table;

	procedure Tabulate(T: Table);
		var i, k: integer;
	begin
		for k := 0 to P-1 do
			if T.Content[k].key[0] # 0X then
				for i:=0 to WordLen-1 do write(T.Content[k].key[i]); end; write("      ");
				for i := 0 to T.Content[k].n -1 do write(T.Content[k].lno[i]:4) end;
				writeln;
			end;
		end;
	end Tabulate;

	procedure search(var a: mystring; ln: integer; T: Table);
		 var i, d, h: integer; found: boolean; ch: char;
	begin   (*compute hash index h for a*)
		i := 0; h := 0; ch := a[0];
		while ch > 0X do
			h := (256*h + integer(ch)) mod P; inc(i); ch := a[i]
		end ;
		d := 1; found := false;
		repeat
			i:=0;
			while (i<WordLen) & (T.Content[h].key[i] = a[i]) do i:=i+1; end;
			if i = WordLen then (*match*)
				found := true; T.Content[h].lno[T.Content[h].n] := ln;
				if T.Content[h].n < nof then inc(T.Content[h].n) end
			elsif T.Content[h].key[0] = 0X then (*new entry*)
				found := true; 
                                for i:=0 to WordLen-1 do 
                                     T.Content[h].key[i] := a[i]; 
                                end; 
				T.Content[h].lno[0] := ln; 
				T.Content[h].n := 1
			else (*collision*) h := h+d; d := d+2;
				if h >= P then h := h-P end;
				if d = P then write(" Table overflow"); halt(88) end;
			end;
		until found;
	end search;

	procedure Scan(var H: Table);
		(*scan input text and build tree*)
		var line, k, i: integer; ch: char;
			buffer: mystring; s:string; reading: boolean;
 	begin line := 0;
		write(0: 6, " |"); readln(s);
		while s # "" do (* *-stop *)
			inc(line); write(line:6, " |");
			reading:=false;
			for i:=0 to len(s)-1 do
			  ch:=s[i];
			  if (cap(ch) >= "A") & (cap(ch) <= "Z") then
			        if ~reading then (*word*) k :=0; reading := true; end;
				buffer[k] := ch; k:=k+1; 
			  end;
			  if ((cap(ch) < "A") or (cap(ch) > "Z") ) or (i=len(s)-1) then
			    	if reading then 
 					search(buffer, line-1, H); 
 					reading := false;
 					for k:=0 to WordLen-1 do buffer[k] := 0X; end;
				end;
			  end;
			end;
			readln(s);
		end;
		writeln; writeln;
	end Scan;

	procedure Make;
		var
		    H: Table;  (* hash table *)
	begin   
		H := new Table;
		Scan(H); Tabulate(H)
	end Make;

begin 
  writeln("Example 5.1");
  P := _P;
  Make;
  writeln("Type 'q' to quit");
end XRef.
