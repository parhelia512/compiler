(* ********* Zonnon online collection ***********
 * B Tree (Chapter 4, Example 4.7)
 *
 * This example is a part of Prof. Nikalus Wirth's book
 * www.zonnon.ethz.ch/usergroup
 * (c) ETH Zurich 
 *)

module BTree;
const _N = 2;  (*degree of B-trees*)
	
(* 1. Every page contains at most 2N items (keys.)
   2. Every page, except the root page, contains at least N items.
   3. Every page is either a leaf page, i.e. has no descendants,
          or it has m+1 descendants, where m is the number of keys on this page.
   4. All leaf pages appear at the same level. *)


var N:integer;

object {value, public} Entry;
var {public}
    key: integer;
    p: Page;
end Entry;

object {ref, public} Page;
var {public}
    m: integer;  (*no. of entries on page*)
    p0: Page;
    e: array 2 * (_N) of Entry;
end Page;
	
var root: Page; 

procedure search(x: integer; var p: Page; var k: integer);
var i, L, R: integer; found: boolean; a: Page;
begin a := root; found := false;
	while (a # nil) & ~found do 
		L := 0; R := a.m;  (*binary search*)
		while L < R do
			i := (L+R) div 2;
			if x <= a.e[i].key then R := i; else L := i+1; end;
		end;
		if (R < a.m) & (a.e[R].key = x) then found := true;
		elsif R = 0 then a := a.p0 else a := a.e[R-1].p;
		end;
	end;
	p := a; k := R;
end search;

procedure ShowTree(p: Page; level: integer);
  var i: integer;
begin
  if p # nil then
    for i := 1 to level do write(" "); end;
    for i := 0 to p.m-1 do write(p.e[i].key:4); end;
    writeln(" ");
    if p.m > 0 then ShowTree(p.p0, level+1); end;
    for i := 0 to p.m-1 do ShowTree(p.e[i].p, level+1); end
  end
end ShowTree;

procedure Search;
	var x, k: integer; p: Page; s:integer;
begin 
  writeln("Type numbers. 0 - to finish.");
  write("?> "); readln(s);
  while s # 0 do
    x := s; write(x: 4); search(x, p, k);
    if (p # nil) & (k < p.m) & (p.e[k].key = x) then write(" found")
    else write(" not in tree")
    end ;
    writeln; write("?> "); readln(s)
  end ;
end Search;



procedure insert(x: integer; a: Page; var h: boolean; var v: Entry);
	(* a # nil. Search key x in B-tree with root a;
		insert new item with key x.  If an entry is to be passed up,
		assign it to v. h := "tree has become higher" *)
	var i, L, R: integer;
		b: Page; u: Entry;                            
begin 
	if a = nil then  v.key := x; v.p := nil; h := true;
	else L := 0; R := a.m;  
 		while L < R do
			i := (L+R) div 2;
			if x <= a.e[i].key then R := i; else L := i+1; end;
		end;
		if (R < a.m) & (a.e[R].key = x) then 
		else 
			if R = 0 then b := a.p0; else b := a.e[R-1].p; end;
			insert(x, b, h, u);
			if h then 
				if a.m < 2*N then
					h := false;
					for i := a.m to R+1 by -1 do a.e[i] := a.e[i-1]; end;
					a.e[R] := u; a.m:=a.m+1;
				else b := new Page;
					if R < N then 
						v := a.e[N-1];
						for i := N-1 to R+1 by -1 do a.e[i] := a.e[i-1]; end;
						a.e[R] := u;
						for i := 0 to N-1 do b.e[i] := a.e[i+N]; end
					else 
						R := R-N;
						if R = 0 then v := u
						else v := a.e[N];
							for i := 0 to R-2 do b.e[i] := a.e[i+N+1]; end;
							b.e[R-1] := u;
						end;
						for i := R to N-1 do b.e[i] := a.e[i+N]; end;
					end;
					a.m := N; b.m := N; b.p0 := v.p; v.p := b;
				end;
			end;
		end;
	end;
end insert;


procedure underflow(c, a: Page; s: integer; var h: boolean);
var b: Page;
    i, k: integer; 
    temp: integer;
begin
	if s < c.m then 
		b := c.e[s].p; k := (b.m - N+1) div 2;
		a.e[N-1] := c.e[s]; a.e[N-1].p := b.p0;
		if k > 0 then 
			for i := 0 to k-2 do a.e[i+N] := b.e[i]; end;
			c.e[s] := b.e[k-1]; b.p0 := c.e[s].p;
			c.e[s].p := b; b.m:=b.m - k;
			for i := 0 to b.m-1 do b.e[i] := b.e[i+k]; end;
			a.m := N-1+k; h := false;
		else 
			for i := 0 to N-1 do a.e[i+N] := b.e[i]; end;
			c.m:=c.m-1;
			for i := s to c.m-1 do c.e[i] := c.e[i+1]; end;
			a.m := 2*N; h := c.m < N;
		end; 

	else 
                s:=s-1;
		if s = 0 then b := c.p0; else b := c.e[s-1].p; end;
		k := (b.m-N+1) div 2;
		if k > 0 then
			for i := N-2 to 0 by -1 do a.e[i+k] := a.e[i]; end;
			a.e[k-1] := c.e[s]; a.e[k-1].p := a.p0;
 			b.m:=b.m-k;
			for i := k-2 to 0 by -1 do 
			     temp:=i+b.m+1;
                           a.e[i] := b.e[temp]; 
                        end; 
			c.e[s] := b.e[b.m]; a.p0 := c.e[s].p;
			c.e[s].p := a; a.m := N-1+k; h := false;
		else 
			c.e[s].p := a.p0; b.e[N] := c.e[s];
			for i := 0 to N-2 do b.e[i+N+1] := a.e[i]; end ;
			b.m := 2*N; c.m:=c.m-1; h := c.m < N;
		end;
	end;
end underflow;


(* Note: this function better to be nested but compiler does not support them yet *)

procedure del(p: Page; var h: boolean; var L, R: integer; var a:Page);
	var k: integer; q: Page; 
begin   
	k := p.m-1; q := p.e[k].p;
	if q # nil then del(q, h,L,R,a);
		if h then underflow(p, q, p.m, h) end
	else p.e[k].p := a.e[R].p; a.e[R] := p.e[k];
		p.m:=p.m-1; h := p.m < N;
	end;
end del;

procedure delete(x: integer; a: Page; var h: boolean);
var i, L, R: integer; q: Page;
begin
	if a # nil then
		L := 0; R := a.m; 
		while L < R do
			i := (L+R) div 2;
			if x <= a.e[i].key then R := i; else L := i+1; end;
		end; 
		if R = 0 then q := a.p0; else q := a.e[R-1].p; end;
		if (R < a.m) & (a.e[R].key = x) then 
			if q = nil then 
				a.m:=a.m-1; h := a.m < N;
				for i := R to a.m-1 do a.e[i] := a.e[i+1]; end
			else del(q, h, L, R, a);
				if h then underflow(a, q, R, h); end
			end;
		else delete(x, q, h);
			if h then underflow(a, q, R, h); end;
		end;
	end;
end delete;


procedure Insert;
  var h: boolean; q: Page; u: Entry; s:integer;
begin 
  writeln("Type numbers. 0 - to finish.");
  write("?> "); readln(s);
  while s # 0 do
    h := false; insert(s, root, h, u);
    if h then (*insert new base page*)
      q := root; root := new Page;
      root.p0 := q; root.e[0] := u; root.m := 1
    end ;
    write("?> "); readln(s)
  end ;
  ShowTree(root, 0); 
end Insert;

procedure Delete;
  var h: boolean; q: Page; s:integer;
begin 
  writeln("Type numbers. 0 - to finish.");
  write("?> "); readln(s);
  while s # 0 do
    delete(s, root, h);
    if h then (*base page size reduced*)
      if root.m = 0 then
        q := root; root := q.p0; (*deallocate(q)*)
      end
    end ;      
    write("?> "); readln(s);
  end;
  ShowTree(root, 0);
end Delete;

procedure Reset;
begin 
   root := nil;
   writeln("reset"); 
end Reset;

begin 
 writeln("Example 4.6");
 N := _N;
 root := nil;
 writeln("Use commands: BTree.Insert, BTree.Delete, BTree.Reset");
 writeln("Type 'q' to quit");
end BTree.
