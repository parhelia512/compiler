(* ********* Zonnon online collection ***********
 * Metro
 *
 * This example is a part of Prof. Jurg Gutknecht's lectures
 * www.zonnon.ethz.ch/usergroup
 * (c) ETH Zurich 
 *)

module Metro; (* Philipp Kramer, mg .net *)

import 
	System.IO.File,
	System.IO.FileStream;

const
	MaxStations = 5000;
	MaxConnects = 20000;
	ChangeTime  = 5;

type
	String = array 64 of char;
	FS = System.IO.FileStream;
	
object {public, value} StationData;
	var {public}
		name        : String;
		targets     : integer; (* index into Connects *)
		visitedFrom : integer; (* index into Stations *)
		visitedAt   : integer; (* time *)
		using       : integer; (* this_line number *)
end StationData;
	
object {public, value} ConnectData;
	var {public} 
		src  : integer;
		dest : integer; (* index into Stations *)
		time : integer;
		this_line : integer;
end ConnectData;

var
	Stations : array MaxStations of StationData;
	Connects : array MaxConnects of ConnectData;
	NumSta   : integer;
	NumCon   : integer;
	DestSta  : integer;

procedure SwarmOut(at : integer; from_ : integer; arrive : integer);
var i,
	now,
	dest,
	leave_ : integer;
begin
	for i := Stations[from_].targets to Stations[from_+1].targets-1 do
		now   := Connects[i].time + at;
		dest  := Connects[i].dest;
		leave_ := Connects[i].this_line;
		if now < Stations[dest].visitedAt then
			Stations[dest].visitedAt   := now;
			Stations[dest].visitedFrom := from_;
			Stations[dest].using       := leave_;
			if dest # DestSta then SwarmOut(now, dest, leave_) end
		end
	end
end SwarmOut;

procedure {public} Compute;
var 
	srcSta, i, k : integer;
	s : string;
begin
	for i := 0 to NumSta-1 do
		Stations[i].visitedAt   := 2147483647; (* max(integer); *)
		Stations[i].visitedFrom := -1
	end;
	
	writeln("please enter srcSta:");
	read(srcSta);

	writeln("please enter DestSta:");
	read(DestSta);

	if (0 <= srcSta ) & (srcSta  < MaxStations) & 
	   (0 <= DestSta) & (DestSta < MaxStations) 
	then
		Stations[srcSta].visitedAt := 0;
		SwarmOut(-ChangeTime, srcSta, -1);
		
		i := DestSta;
		while i >= 0 do;
			if Stations[i].using > 0 then
				(* Hide artificial stations. *)
				k := Stations[i].using;
				write(k);
				k := Stations[i].visitedAt;
				write(k); write(" ":1);
				copy(Stations[i].name, s);
				writeln(s) 
			end;
			i := Stations[i].visitedFrom
		end;
		writeln
	else
		writeln("invalid query")
	end
end Compute;

procedure NewSta(name : String) : integer;
var
 	i : integer;
begin
	Stations[NumSta] := new StationData();

	i := 0;
	while name[i] # 0X do
		Stations[NumSta].name[i] := name[i];
		inc(i)
	end;
	Stations[NumSta].name[i] := name[i];
	inc(NumSta);
	return NumSta-1
end NewSta;

procedure NewCon(From : integer; To : integer; time : integer; this_line : integer);
begin
	Connects[NumCon] := new ConnectData();

	Connects[NumCon].src  := From;
	Connects[NumCon].dest := To;
	Connects[NumCon].time := time;
	Connects[NumCon].this_line := this_line;
	inc(NumCon)
end NewCon;

procedure IsEqual(s1 : String; s2 : String) : boolean;
var k : integer;
begin
	for k := 0 to 63 do
		if s1[k] # s2[k] 
		then return false end
	end;

	return true
end IsEqual;

procedure GetIndex(s : String) : integer;
var 
	i : integer;
begin
	i := 0;
	while (i < NumSta) & IsEqual(Stations[i].name, s) do inc(i) end; 

	if i = NumSta then i := NewSta(s) end;

	return i
end GetIndex;

procedure ReadUntilEOL(var Stream : FS; var s : String);
var
	i, cur : integer;
	ch : char;
begin
	i := 0;
	cur := Stream.ReadByte();
	ch := char(cur);
	while cur # 13 do  (* ascii table, 13 = carriage return *)
		s[i] := ch; inc(i); cur := Stream.ReadByte(); ch := char(cur)
	end;
	s[i] := 0X
end ReadUntilEOL;

procedure Quicksort(L, R : integer);
var
	i, j, x, t : integer;
	s : String;
begin
    i := L;
    j := R;
    x := Connects[(L+R) div 2].src;
    loop
        while Connects[i].src < x do inc(i) end;
        while Connects[j].src > x do dec(j) end;
        if i > j then exit end;
        t := Connects[i].src ; Connects[i].src  := Connects[j].src ; Connects[j].src  := t;
        t := Connects[i].dest; Connects[i].dest := Connects[j].dest; Connects[j].dest := t;
        t := Connects[i].time; Connects[i].time := Connects[j].time; Connects[j].time := t;
        t := Connects[i].this_line; Connects[i].this_line := Connects[j].this_line; Connects[j].this_line := t;
        inc(i); dec(j)
    end;
    if i = j then inc(i); dec(j)  end;
    if L < j then Quicksort(L, j) end;
    if R > i then Quicksort(i, R) end
end Quicksort;

procedure ReadInt(var fs : FS; var eof : boolean; var res : integer);
(* very bad hack, mg *)
var
	negative : boolean;
	buffer : array 10 of integer;
	cur, i : integer;
begin
	i := 0;
	cur := fs.ReadByte();
	if cur = -1 then eof := true; return end;
	if cur = 10 then cur := fs.ReadByte() end; (* linefeed *)

	if char(cur) = '-' (* no further checks!!!!!!!! *)
	then 
		negative := true; 
		cur := fs.ReadByte(); 
		if cur = -1 then eof := true; return end
	else
		negative := false
	end;

	repeat
		buffer[i] := cur - integer('0');
		inc(i);
		cur := fs.ReadByte()
	until ((cur = -1) or (char(cur) = ' ') or (cur = 13));

	if cur = -1 then eof := true end;
	cur := 1;
	dec(i);
	res := 0;

	while i >= 0 do
		res:= res + cur * buffer[i];
		cur:= cur * 10;
		dec(i)
	end;	

	if negative then res := -res end
end ReadInt;

(*
	Each "tram" stat_ion consists of an "artificial" node and
	a node for each (directed) this_line that_ has a stop at_ that_
	stat_ion. The nodes are connected in star topology.
	This way we can model the time it takes to change the this_line.
*)
procedure {public} ReadNet;
var
	artif,
	this_line,
	from_,
	To,
	time,
	cumul : integer;
	s    : String;
	name : String;
	ch   : char;
	i, j, k : integer;
	fileStream : FS;
	eof : boolean;
	buf : string;
begin
	NumSta := 0;
	NumCon := 0;
	eof := false;
	
 	if ~System.IO.File.Exists("vbz.txt") then
		writeln("The file1 does not exist: vbz.txt");
		return
	end;

	fileStream := System.IO.File.OpenRead("vbz.txt");
	ReadInt(fileStream, eof, this_line);

	while ~eof & (this_line > 0) do
		ReadUntilEOL(fileStream, s);
		artif := GetIndex(s);
		from_  := NewSta(s);
		NewCon(artif, from_, ChangeTime, 0);
		NewCon(from_, artif, 0, 0);
		
		cumul := 0;
		ReadInt(fileStream, eof, time);
		while time > 0 do
			ReadUntilEOL(fileStream, s);
			artif := GetIndex(s);
			To := NewSta(s);
			NewCon(artif, To, ChangeTime, 0);
			NewCon(To, artif, 0, 0);
			NewCon(from_, To, time-cumul, this_line);
			
			from_ := To;
			cumul := time;
			ReadInt(fileStream, eof, time);
			if time < cumul then cumul := 0 end (* on the way back *)
		end;
		
		ReadInt(fileStream, eof, this_line)
	end;
	
	Quicksort(0, NumCon-1);
	
	j := 0;
	for i := 0 to NumSta do (* not NumSta-1: set stopper *)
		Stations[i].targets := j;
		name := Stations[i].name;
		if GetIndex(name) = i then
			copy(Stations[i].name, buf);
			write(buf); write("  "); writeln(i) 
		end;
		while (j < NumCon) & (Connects[j].src = i) do inc(j) end
	end
end ReadNet;
 
begin
	writeln("reading net...");
	ReadNet(); 
	writeln("net ok");
	Compute(); 
	writeln("done");
end Metro.