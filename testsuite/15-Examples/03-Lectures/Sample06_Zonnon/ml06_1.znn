(* ********* Zonnon online collection ***********
 * Permutation
 *
 * This example is a part of Prof. Jurg Gutknecht's lectures
 * www.zonnon.ethz.ch/usergroup
 * (c) ETH Zurich 
 *)

module Permutation;

const
	maxobjectS = 10;

var	
	Objects : array maxobjectS of integer;
	NofObjects, l, k, a : integer;

procedure Change(i : integer);
var	
	j, c, m : integer;
begin
	if i # NofObjects - 1 then
		for j := 1 to NofObjects - i - 1 do
			Change(i + 1);
			a := Objects[i];
			Objects[i] := Objects[NofObjects - j];
			Objects[NofObjects - j] := a;
			l := NofObjects - 1;
			k := i + 1;

			while k < l do
				a := Objects[k];
				Objects[k] := Objects[l];
				Objects[l] := a;
				inc(k);
				dec(l);
			end;

			writeln;

			for m := 0 to NofObjects - 1 do
				write(Objects[m]:3); write(" ":1);
			end;

			c := NofObjects - i - 1;

			if (j = c) & (j # 1) then
				Change(i + 1);
			end;
		end;
	end;
end Change;

begin
	writeln("Type a number between 1 and 10:");
	readln(NofObjects);
	writeln("Premutation started.");
	writeln;

	for l := 0 to NofObjects - 1 do
		Objects[l] := l + 1;
	end;

	Change(0);

	writeln;
	writeln("The program is done. Press the Enter key.");
	readln;
end Permutation.
