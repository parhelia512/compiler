(* ------|---------|---------|---------|---------|---------|---------|------- *)
(*       BBBB      EEEEE     L         The                                    *)
(*       B   B     E         L           BIO                                  *)
(*       BBBB      EEE       L           ENGINEERING                          *)
(*       B    B    E         L           LABORATORY                           *)
(*       BBBBB     EEEEEE    LLLLLL        @ Saginaw Valley State University  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Copyright 2008-2009, Alan D. Freed                                         *)
(*                                                                            *)
(* This file is part of the BEL suite of .NET/mono libraries.                 *)
(*                                                                            *)
(* BEL is a free software: you can redistribute it and/or modify it under the *)
(* terms of the GNU Lesser General Public License as published by the Free    *)
(* Software Foundation, either version 3 of the License, or (at your option)  *)
(* any later version.                                                         *)
(*                                                                            *)
(* BEL is distributed in the hope that it will be useful, but WITHOUT ANY     *)
(* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  *)
(* FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for   *)
(* more details.                                                              *)
(*                                                                            *)
(* You should have received a copy of the GNU Lesser General Public License   *)
(* along with BEL.  If not, see <http://www.gnu.org/licenses/>.               *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Creates a key for sorting data in data structures used to store data       *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Object      : Key          - a key for sorting data in data structures     *)
(*    methods  : Initialize   - sets a key to its default (or settable) value *)
(*             : Get          - returns the integer value held by a key       *)
(*             : Set          - assigns an integer value to a key             *)
(*                            - once set, a key cannot be reset               *)
(*             : Load         - reads a key from a binary data file           *)
(*             : Store        - writes a key to a binary data file            *)
(*             : Parse        - converts a string into a key                  *)
(*             : Typeset      - converts a key into a string                  *)
(*             : Equals       - a boolean test of equality between two keys   *)
(*             : LessThan     - a boolean test of less than between two keys  *)
(*             : GreaterThan  - a boolean test of greater than between 2 keys *)
(* Operators   : :=                          - assignment                     *)
(*             : = | # | < | <= | > | >=     - logical operators              *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)

module {public} BelData.Keys;

   import
      System.Byte            as Card8,   (* core type of  cardinal{8}  *)
      System.UInt16          as Card16,  (* core type of  cardinal{16} *)
      System.UInt32          as Card32,  (* core type of  cardinal{32} *)
      System.UInt64          as Card64,  (* core type of  cardinal{64} *)
      System.SByte           as Int8,    (* core type of  integer{8}   *)
      System.Int16           as Int16,   (* core type of  integer{16}  *)
      System.Int32           as Int32,   (* core type of  integer{32}  *)
      System.Int64           as Int64,   (* core type of  integer{64}  *)
      System.Double          as Real64,
      System.Convert         as Convert,
      System.IO.BinaryReader as BinaryReader,
      System.IO.BinaryWriter as BinaryWriter,
      BelCore.Log            as L;

   var {private}
      maxCard : Card64;

   type {private}
      CharArray = array * of char;

   type {public, value} Key = object

      var {private}
         k : Int64;

      procedure {public} Initialize;
      begin
         k := Int64.MinValue
      end Initialize;

      procedure {public} Get () : Int64;
      begin
         return k
      end Get;

      procedure {public} Set (i : Int64);
      var
         s : string;
      begin {locked}
         if k.CompareTo(Int64.MinValue) = 0 then
            k := i
         else
            L.WarningMessage(510,415, "BelData.Keys.Key.Set")
         end
      end Set;

      procedure {public} Load (br : BinaryReader);
      var
         i : Int64;
         s : string;
      begin {locked}
         i := br.ReadInt64();
         if k.CompareTo(Int64.MinValue) = 0 then
            k := i
         else
            L.WarningMessage(510,415, "BelData.Keys.Key.Set")
         end
      end Load;

      procedure {public} Store (bw : BinaryWriter);
      begin
         bw.Write(k);
         bw.Flush
      end Store;

      procedure {public} Parse (s : string);
      var
         a : CharArray;
         b : array 36 of char;
         i, j : integer;
         y : string;
      begin {locked}
         a := new CharArray(len(s)+2);
         copy(s, a);
         (* pass over any leading white space *)
         j := 0;
         while a[j] = " " do
            inc(j)
         end;
         (* read a contiguous array of characters *)
         i := 0;
         repeat
            b[i] := a[j];
            inc(i);
            inc(j);
         until (a[j] = " ") or (j = len(s));
         (* copy this array into a string *)
         a := new CharArray(i+1);
         for j := 0 to i-1 do
            a[j] := b[j]
         end;
         copy(a, y);
         k := Int64.Parse(y)
      end Parse;

      procedure {public} Typeset () : string;
      begin
         return k.ToString("N0")
      end Typeset;

      procedure {public} Equals (r : Key) : boolean;
      begin
         return (k.CompareTo(r.k) = 0)
      end Equals;

      procedure {public} LessThan (r : Key) : boolean;
      begin
         return (k.CompareTo(r.k) < 0)
      end LessThan;

      procedure {public} GreaterThan (r : Key) : boolean;
      begin
         return (k.CompareTo(r.k) > 0)
      end GreaterThan;

   begin
      Initialize
   end Key;

   operator {public} ":=" (var l : Key; r : Int8);
   begin
      l.Set(Convert.ToInt64(r))
   end ":=";

   operator {public} ":=" (var l : Key; r : Int16);
   begin
      l.Set(Convert.ToInt64(r))
   end ":=";

   operator {public} ":=" (var l : Key; r : Int32);
   begin
      l.Set(Convert.ToInt64(r))
   end ":=";

   operator {public} ":=" (var l : Key; r : Int64);
   begin
      l.Set(r)
   end ":=";

   operator {public} ":=" (var l : Key; r : Card8);
   begin
      l.Set(Convert.ToInt64(r))
   end ":=";

   operator {public} ":=" (var l : Key; r : Card16);
   begin
      l.Set(Convert.ToInt64(r))
   end ":=";

   operator {public} ":=" (var l : Key; r : Card32);
   begin
      l.Set(Convert.ToInt64(r))
   end ":=";

   operator {public} ":=" (var l : Key; r : Card64);
   var
      s : string;
   begin
      if r.CompareTo(maxCard) > 0 then
         L.WarningMessage(50,415, "BelData.Keys operator ':=' for cardinal{64}")
      else
         l.Set(Convert.ToInt64(r))
      end
   end ":=";

   operator {public} "=" (l, r : Key) : boolean;
   begin
      return l.Equals(r)
   end "=";

   operator {public} "#" (l, r : Key) : boolean;
   begin
      return ~l.Equals(r)
   end "#";

   operator {public} "<" (l, r : Key) : boolean;
   begin
      return l.LessThan(r)
   end "<";

   operator {public} "<=" (l, r : Key) : boolean;
   begin
      return ~l.GreaterThan(r)
   end "<=";

   operator {public} ">" (l, r : Key) : boolean;
   begin
      return l.GreaterThan(r)
   end ">";

   operator {public} ">=" (l, r : Key) : boolean;
   begin
      return ~l.LessThan(r)
   end ">=";

begin
   maxCard := Convert.ToUInt64(Int64.MaxValue)
end Keys.