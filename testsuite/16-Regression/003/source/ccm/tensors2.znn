(* ------|---------|---------|---------|---------|---------|---------|------- *)
(*       BBBB      EEEEE     L         The                                    *)
(*       B   B     E         L           BIO                                  *)
(*       BBBB      EEE       L           ENGINEERING                          *)
(*       B    B    E         L           LABORATORY                           *)
(*       BBBBB     EEEEEE    LLLLLL        @ Saginaw Valley State University  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Copyright 2008-2009, Alan D. Freed                                         *)
(*                                                                            *)
(* This file is part of the BEL suite of .NET/mono libraries.                 *)
(*                                                                            *)
(* BEL is a free software: you can redistribute it and/or modify it under the *)
(* terms of the GNU Lesser General Public License as published by the Free    *)
(* Software Foundation, either version 3 of the License, or (at your option)  *)
(* any later version.                                                         *)
(*                                                                            *)
(* BEL is distributed in the hope that it will be useful, but WITHOUT ANY     *)
(* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  *)
(* FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for   *)
(* more details.                                                              *)
(*                                                                            *)
(* You should have received a copy of the GNU Lesser General Public License   *)
(* along with BEL.  If not, see <http://www.gnu.org/licenses/>.               *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Ccm was written to model in-plane biaxial experiments run in my laboratory *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Defines a tensor in 2-space; specifically, a 2x2 array of scalars          *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* The row and column indexers go from 1..2, not from 0..1 as in Zonnon and C *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* In-plane tensor fields have zero valued 13, 23, 31, 32 and 33 components   *)
(*       | T11  T12   0  |                                                    *)
(*   T = | T21  T22   0  |                                                    *)
(*       |  0    0    0  |                                                    *)
(* and are therefore represented internally as a four-element array, viz.,    *)
(*   T = {T11, T12, T21, T22}^T                                               *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Constant    : I             - a dimensionless diagonal tensor of 1s        *)
(* Object      : Tensor        - an 3x3 array of scalars                      *)
(*    methods  : Initialize;   - creates & initialize the internal matrix     *)
(*             : Nullify       - sets the internal array to nil               *)
(*             : Clone         - returns an initialized tensor                *)
(*             : Copy          - returns a deep copy of the tensor            *)
(*             : Load          - retrieves the tensor from a binary file      *)
(*             : Store         - writes the tensor to a binary file           *)
(*             : Typeset       - convert specified row in tensor into string  *)
(*             : TypesetVoigt  - convert tensor into vector string            *)
(*             : Get           - implements [].Get, returns a scalar          *)
(*             : Set           - implements [].Set, assigns a scalar          *)
(*             : GetUnits      - returns the units part of a tensor field     *)
(*             : SetUnits      - assigns the units part of a tensor field     *)
(*             : GetArray      - retrieves internal array, less its units     *)
(*             : SetArray      - assigns an internal array, less its units    *)
(*             : IsDimensionless - boolean check for dimensionality           *)
(*             : Equals        - checks two tensors for equality              *)
(*    (# overwrite the internal matrix with the arithmetic result #)          *)
(*             : Neg           - negates all elements of the tensor           *)
(*             : IncBy         - increments the tensor by the tensor argument *)
(*             : DecBy         - decrements the tensor by the tensor argument *)
(*             : MulBy         - multiplies the tensor by a scalar argument   *)
(*             : DivBy         - divides the tensor by a scalar argument      *)
(*             : ScaBy         - multiplies the tensor by a real argument     *)
(*    (# return new objects of type Tensor with the arithmetic result #)      *)
(*             : Negative      - returns the negative of the tensor           *)
(*             : Add           - returns the sum of two tensors               *)
(*             : Subtract      - returns the difference between two tensors   *)
(*             : Multiply      - returns the product of a tensor and a scalar *)
(*             : Divide        - returns the ratio of a tensor to a scalar    *)
(*             : Scale         - returns the product of a tensor and a real   *)
(*    (# some basic functions for tensors #)                                  *)
(*             : Dot           - returns T_{ij} = L_{ik} R_{kj}               *)
(*             : DotTranspose  - returns T_{ij} = L_{ik} R_{jk}               *)
(*             : TransposeDot  - returns T_{ij} = L_{ki} R_{kj}               *)
(*             : Contract           - returns T_{ij} = L_{ik} R_k             *)
(*             : TransposeContract  - returns T_{ij} = L_{ki} R_k             *)
(*             : DoubleDot          - returns X = L_{ij} R_{ij}               *)
(*             : TransposeDoubleDot - returns X = L_{ji} R_{ij}               *)
(* Operators   : -             - uniary  operator                             *)
(*             : :=            - assignment                                   *)
(*             : = | #         - logical operators                            *)
(*             : + | - | * | / - binary  operators                            *)
(* Functions   : Norm            - returns the Frobenius norm                 *)
(*             : FirstInvariant  - returns the first invariant of the tensor  *)
(*             : SecondInvariant - returns the second invariant of the tensor *)
(*             : Trace           - returns the trace of a tensor              *)
(*             : Determinant     - returns the determinant of a tensor        *)
(*             : Transpose       - returns the tensor transpose               *)
(*             : SymmetricPart   - returns T_{ij} = (M_{ij} + M_{ji})/2       *)
(*             : SkewPart        - returns T_{ij} = (M_{ij} - M_{ji})/2       *)
(*             : Inverse         - returns the tensor inverse, if it exists   *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)


module {public} BelCcm.Tensors2;

   import
      System.IO.BinaryReader as BinaryReader,
      System.IO.BinaryWriter as BinaryWriter,
      System.Byte   as Card8,   (* core type of  cardinal{8}  *)
      System.UInt16 as Card16,  (* core type of  cardinal{16} *)
      System.UInt32 as Card32,  (* core type of  cardinal{32} *)
      System.UInt64 as Card64,  (* core type of  cardinal{64} *)
      System.SByte  as Int8,    (* core type of  integer{8}   *)
      System.Int16  as Int16,   (* core type of  integer{16}  *)
      System.Int32  as Int32,   (* core type of  integer{32}  *)
      System.Int64  as Int64,   (* core type of  integer{64}  *)
      System.Single as Real32,  (* core type of  real{32}     *)
      System.Double as Real64,  (* core type of  real{64}     *)
      BelCore.Arrays  as A,
      BelCore.Log     as L,
      BelCore.Math    as M,
      BelCore.Numbers as N,
      BelCcm.Scalars  as S,
      BelCcm.Units    as U,
      BelCcm.Vectors2 as V;

   var {private}
      zero, one, two : N.Number;
      oneScalar, twoScalar : S.Scalar;

   var {public, immutable}
      I : Tensor;

   type {private}
      CharArray = array * of char;

   type {public, value} Tensor = object implements []

      var {private}
         a : A.Array;
         u : U.Si;

      procedure {public} Initialize;
      begin {locked}
         a.Initialize(4);
         u.Initialize
      end Initialize;

      procedure {public} Nullify;
      begin {locked}
         a.Nullify;
         u.Nullify
      end Nullify;

      procedure {public} Clone () : Tensor;
      var
         t : Tensor;
      begin
         t.a := a.Clone();
         t.u := u.Clone();
         return t
      end Clone;

      procedure {public} Copy () : Tensor;
      var
         t : Tensor;
      begin
         t.a := a.Copy(A.deepCopy);
         t.u := u;
         return t
      end Copy;

      procedure {public} Load (br : BinaryReader);
      begin {locked}
         u.Load(br);
         a.Load(br)
      end Load;

      procedure {public} Store (bw : BinaryWriter);
      begin {locked}
         u.Store(bw);
         a.Store(bw)
      end Store;

      procedure {public} Typeset (row : integer) : string;
      var
         i : integer;
         r : N.Number;
         s : string;
      begin {locked}
         if row = 1 then
            r := a[1];
            s := "/" + r.ToString(7);
            for i := len(s) to 18 do
               s := s + " "
            end;
            r := a[2];
            s := s + r.ToString(7);
            for i := len(s) to 33 do
               s := s + " "
            end;
            s := s + "\ "
         elsif row = 2 then
            r := a[3];
            s := "\" + r.ToString(7);
            for i := len(s) to 18 do
               s := s + " "
            end;
            r := a[4];
            s := s + r.ToString(7);
            for i := len(s) to 33 do
               s := s + " "
            end;
            s := s + "/ ";
            s := s + u.Typeset()
         else
            L.WarningMessage(310,415, "BelCcm.Tensors2.Tensor.Typeset");
            s := ""
         end;
         return s
      end Typeset;

      procedure {public} TypesetVoigt () : string;
      var
         i : integer;
         r : N.Number;
         s : string;
      begin {locked}
         r := a[1];
         s := "{" + r.ToString(7);
         for i := len(s) to 18 do
            s := s + " "
         end;
         r := a[2];
         s := s + r.ToString(7);
         for i := len(s) to 35 do
            s := s + " "
         end;
         r := a[3];
         s := s + r.ToString(7);
         for i := len(s) to 52 do
            s := s + " "
         end;
         r := a[4];
         s := s + r.ToString(7);
         for i := len(s) to 67 do
            s := s + " "
         end;
         s := s + "}^T ";
         s := s + u.Typeset();
         return s
      end TypesetVoigt;

      procedure {public} Get (row, col : integer) : S.Scalar implements [].Get;
      var
         s : S.Scalar;
      begin
         s.SetUnits(u);
         if row = 1 then
            if col = 1 then
               s.Set(a.Get(1))
            elsif col = 2 then
               s.Set(a.Get(2))
            else
               L.WarningMessage(310,425, "BelCcm.Tensors2.Tensor.Get")
            end
         elsif row = 2 then
            if col = 1 then
               s.Set(a.Get(3))
            elsif col = 2 then
               s.Set(a.Get(4))
            else
               L.WarningMessage(310,425, "BelCcm.Tensors2.Tensor.Get")
            end
         else
            L.WarningMessage(310,425, "BelCcm.Tensors2.Tensor.Get")
         end;
         return s
      end Get;

      procedure {public} Set (row, col : integer; s : S.Scalar)
         implements [].Set;
      begin {locked}
         if u.Equals(s.GetUnits()) then
            if row = 1 then
               if col = 1 then
                  a.Set(1, s.Get())
               elsif col = 2 then
                  a.Set(2, s.Get())
               else
                  L.WarningMessage(310,415, "BelCcm.Tensors2.Tensor.Set")
               end
            elsif row = 2 then
               if col = 1 then
                  a.Set(3, s.Get())
               elsif col = 2 then
                  a.Set(4, s.Get())
               else
                  L.WarningMessage(310,415, "BelCcm.Tensors2.Tensor.Set")
               end
            else
               L.WarningMessage(310,415, "BelCcm.Tensors2.Tensor.Set")
            end
         else
            L.WarningMessage(300,415, "BelCcm.Tensors2.Tensor.Set")
         end
      end Set;

      procedure {public} GetUnits () : U.Si;
      begin
         return u
      end GetUnits;

      procedure {public} SetUnits (si : U.Si);
      begin {locked}
         u := si
      end SetUnits;

      procedure {public} GetArray () : A.Array;
      var
         arr : A.Array;
      begin
         arr.SetArray(a.GetArray(A.shallowCopy), A.shallowCopy);
         return arr
      end GetArray;

      procedure {public} SetArray (arr : A.Array);
      begin {locked}
         if arr.Length() = 4 then
            a.SetArray(arr.GetArray(A.shallowCopy), A.deepCopy)
         else
            L.WarningMessage(310,205, "BelCcm.Tensors2.Tensor.SetArray")
         end
      end SetArray;

      procedure {public} IsDimensionless () : boolean;
      begin
         return u.IsDimensionless()
      end IsDimensionless;

      procedure {public} Equals (t : Tensor) : boolean;
      begin
         return (u.Equals(t.u) & a.Equals(t.a))
      end Equals;

      procedure {public} Neg;
      begin {locked}
         a.Neg
      end Neg;

      procedure {public} IncBy (t : Tensor);
      begin {locked}
         if u.Equals(t.u) then
            a.IncBy(t.a)
         else
            L.WarningMessage(301,415, "BelCcm.Tensors2.Tensor.IncBy")
         end
      end IncBy;

      procedure {public} DecBy (t : Tensor);
      begin {locked}
         if u.Equals(t.u) then
            a.DecBy(t.a)
         else
            L.WarningMessage(301,415, "BelCcm.Tensors2.Tensor.DecBy")
         end
      end DecBy;

      procedure {public} MulBy (s : S.Scalar);
      begin {locked}
         u.IncBy(s.GetUnits());
         a.MulBy(s.Get())
      end MulBy;

      procedure {public} DivBy (s : S.Scalar);
      begin {locked}
         u.DecBy(s.GetUnits());
         a.DivBy(s.Get())
      end DivBy;

      procedure {public} ScaBy (r : N.Number);
      begin {locked}
         a.MulBy(r)
      end ScaBy;

      procedure {public} Negative () : Tensor;
      var
         t : Tensor;
      begin
         t.u := u;
         t.a := a.Negative();
         return t
      end Negative;

      procedure {public} Add (t : Tensor) : Tensor;
      var
         ten : Tensor;
      begin
         if u.Equals(t.u) then
            ten.u := u;
            ten.a := a.Add(t.a)
         else
            L.WarningMessage(301,205, "BelCcm.Tensors2.Tensor.Add")
         end;
         return ten
      end Add;

      procedure {public} Subtract (t : Tensor) : Tensor;
      var
         ten : Tensor;
      begin
         if u.Equals(t.u) then
            ten.u := u;
            ten.a := a.Subtract(t.a)
         else
            L.WarningMessage(301,205, "BelCcm.Tensors2.Tensor.Subtract")
         end;
         return ten
      end Subtract;

      procedure {public} Multiply (s : S.Scalar) : Tensor;
      var
         t : Tensor;
      begin
         t.u := u.Add(s.GetUnits());
         t.a := a.Multiply(s.Get());
         return t
      end Multiply;

      procedure {public} Divide (s : S.Scalar) : Tensor;
      var
         t : Tensor;
      begin
         t.u := u.Subtract(s.GetUnits());
         t.a := a.Divide(s.Get());
         return t
      end Divide;

      procedure {public} Scale (r : N.Number) : Tensor;
      var
         t : Tensor;
      begin
         t.u := u;
         t.a := a.Multiply(r);
         return t
      end Scale;

      (* L.Dot(R) returns  T_{i,j} := L_{i,k} R_{k,j} *)
      procedure {public} Dot (t : Tensor) : Tensor;
      var
         l1, l2, l3, l4, r1, r2, r3, r4 : N.Number;
         ten : Tensor;
      begin
         l1 := a.Get(1);
         l2 := a.Get(2);
         l3 := a.Get(3);
         l4 := a.Get(4);
         r1 := t.a.Get(1);
         r2 := t.a.Get(2);
         r3 := t.a.Get(3);
         r4 := t.a.Get(4);
         ten.u := u + t.u;
         ten.a.Set(1, l1*r1 + l2*r3);
         ten.a.Set(2, l1*r2 + l2*r4);
         ten.a.Set(3, l3*r1 + l4*r3);
         ten.a.Set(4, l3*r2 + l4*r4);
         return ten
      end Dot;

      (* L.DotTranspose(R) returns  T_{i,j} := L_{i,k} R_{j,k} *)
      procedure {public} DotTranspose (t : Tensor) : Tensor;
      var
         l1, l2, l3, l4, r1, r2, r3, r4 : N.Number;
         ten : Tensor;
      begin
         l1 := a.Get(1);
         l2 := a.Get(2);
         l3 := a.Get(3);
         l4 := a.Get(4);
         r1 := t.a.Get(1);
         r2 := t.a.Get(2);
         r3 := t.a.Get(3);
         r4 := t.a.Get(4);
         ten.u := u + t.u;
         ten.a.Set(1, l1*r1 + l2*r2);
         ten.a.Set(2, l1*r3 + l2*r4);
         ten.a.Set(3, l3*r1 + l4*r2);
         ten.a.Set(4, l3*r3 + l4*r4);
         return ten
      end DotTranspose;

      (* L.TransposeDot(R) returns  T_{i,j} := L_{k,i} R_{k,j} *)
      procedure {public} TransposeDot (t : Tensor) : Tensor;
      var
         l1, l2, l3, l4, r1, r2, r3, r4 : N.Number;
         ten : Tensor;
      begin
         l1 := a.Get(1);
         l2 := a.Get(2);
         l3 := a.Get(3);
         l4 := a.Get(4);
         r1 := t.a.Get(1);
         r2 := t.a.Get(2);
         r3 := t.a.Get(3);
         r4 := t.a.Get(4);
         ten.u := u + t.u;
         ten.a.Set(1, l1*r1 + l3*r3);
         ten.a.Set(2, l1*r2 + l3*r4);
         ten.a.Set(3, l2*r1 + l4*r3);
         ten.a.Set(4, l2*r2 + l4*r4);
         return ten
      end TransposeDot;

      (* L.Contract(R) returns  V_i := L_{i,k} R_k *)
      procedure {public} Contract (v : V.Vector) : V.Vector;
      var
         arr : A.Array;
         m1, m2, m3, m4, v1, v2 : N.Number;
         vec : V.Vector;
         vs : S.Scalar;
      begin
         m1 := a.Get(1);
         m2 := a.Get(2);
         m3 := a.Get(3);
         m4 := a.Get(4);
         vs := v.Get(1);
         v1 := vs.Get();
         vs := v.Get(2);
         v2 := vs.Get();
         arr.Initialize(2);
         arr.Set(1, m1*v1 + m2*v2);
         arr.Set(2, m3*v1 + m4*v2);
         vec.SetArray(arr);
         vec.SetUnits(u + v.GetUnits());
         return vec
      end Contract;

      (* L.TransposeContract(R) returns  V_i := L_{k,i} R_k *)
      procedure {public} TransposeContract (v : V.Vector) : V.Vector;
      var
         arr : A.Array;
         m1, m2, m3, m4, v1, v2 : N.Number;
         vec : V.Vector;
         vs : S.Scalar;
      begin
         m1 := a.Get(1);
         m2 := a.Get(2);
         m3 := a.Get(3);
         m4 := a.Get(4);
         vs := v.Get(1);
         v1 := vs.Get();
         vs := v.Get(2);
         v2 := vs.Get();
         arr.Initialize(2);
         arr.Set(1, m1*v1 + m3*v2);
         arr.Set(2, m2*v1 + m4*v2);
         vec.SetArray(arr);
         vec.SetUnits(u + v.GetUnits());
         return vec
      end TransposeContract;

      (* L.DoubleDot(R) returns  X := L_{ij} R_{ji} *)
      procedure {public} DoubleDot (t : Tensor) : S.Scalar;
      var
         l1, l2, l3, l4, r1, r2, r3, r4, sum : N.Number;
         s : S.Scalar;
      begin
         l1 := a.Get(1);
         l2 := a.Get(2);
         l3 := a.Get(3);
         l4 := a.Get(4);
         r1 := t.a.Get(1);
         r2 := t.a.Get(2);
         r3 := t.a.Get(3);
         r4 := t.a.Get(4);
         sum := l1*r1 + l2*r3 + l3*r2 + l4*r4;
         s.Set(sum);
         s.SetUnits(u + t.u);
         return s
      end DoubleDot;

      (* L.TransposeDoubleDot(R) returns  X := L_{ij} R_{ij} *)
      procedure {public} TransposeDoubleDot (t : Tensor) : S.Scalar;
      var
         l1, l2, l3, l4, r1, r2, r3, r4, sum : N.Number;
         s : S.Scalar;
      begin
         l1 := a.Get(1);
         l2 := a.Get(2);
         l3 := a.Get(3);
         l4 := a.Get(4);
         r1 := t.a.Get(1);
         r2 := t.a.Get(2);
         r3 := t.a.Get(3);
         r4 := t.a.Get(4);
         sum := l1*r1 + l2*r2 + l3*r3 +l4*r4;
         s.Set(sum);
         s.SetUnits(u + t.u);
         return s
      end TransposeDoubleDot;

   begin
      Initialize
   end Tensor;


   (* OVERLOADED OPERATORS *)

   operator {public} ':=' (var l : Tensor; r : Tensor);
   begin {locked}
      l.SetUnits(r.GetUnits());
      l.SetArray(r.GetArray())
   end ':=';

   (* places wrappers around their associated tensor methods *)

   operator {public} '-' (t : Tensor) : Tensor;
   begin {locked}
      return t.Negative()
   end '-';

   (* logic operators *)

   operator {public} '=' (l, r : Tensor) : boolean;
   begin {locked}
      return l.Equals(r)
   end '=';

   operator {public} '#' (l, r : Tensor) : boolean;
   begin {locked}
      return ~l.Equals(r)
   end '#';

   (* arithemtic operators *)

   operator {public} '+' (l, r : Tensor) : Tensor;
   begin {locked}
      return l.Add(r)
   end '+';

   operator {public} '-' (l, r : Tensor) : Tensor;
   begin {locked}
      return l.Subtract(r)
   end '-';

   operator {public} '*' (l : S.Scalar; r : Tensor) : Tensor;
   begin {locked}
      return r.Multiply(l)
   end '*';

   operator {public} '*' (l : N.Number; r : Tensor) : Tensor;
   begin {locked}
      return r.Scale(l)
   end '*';

   operator {public} '*' (l : Card8; r : Tensor) : Tensor;
   begin {locked}
      return r.Scale(N.Card8ToNumber(l))
   end '*';

   operator {public} '*' (l : Card16; r : Tensor) : Tensor;
   begin {locked}
      return r.Scale(N.Card16ToNumber(l))
   end '*';

   operator {public} '*' (l : Card32; r : Tensor) : Tensor;
   begin {locked}
      return r.Scale(N.Card32ToNumber(l))
   end '*';

   operator {public} '*' (l : Card64; r : Tensor) : Tensor;
   begin {locked}
      return r.Scale(N.Card64ToNumber(l))
   end '*';

   operator {public} '*' (l : Int8; r : Tensor) : Tensor;
   begin {locked}
      return r.Scale(N.Int8ToNumber(l))
   end '*';

   operator {public} '*' (l : Int16; r : Tensor) : Tensor;
   begin {locked}
      return r.Scale(N.Int16ToNumber(l))
   end '*';

   operator {public} '*' (l : Int32; r : Tensor) : Tensor;
   begin {locked}
      return r.Scale(N.Int32ToNumber(l))
   end '*';

   operator {public} '*' (l : Int64; r : Tensor) : Tensor;
   begin {locked}
      return r.Scale(N.Int64ToNumber(l))
   end '*';

   operator {public} '*' (l : Real32; r : Tensor) : Tensor;
   begin {locked}
      return r.Scale(N.Real32ToNumber(l))
   end '*';

   operator {public} '*' (l : Real64; r : Tensor) : Tensor;
   begin {locked}
      return r.Scale(N.Real64ToNumber(l))
   end '*';

   operator {public} '/' (l : Tensor; r : S.Scalar) : Tensor;
   begin {locked}
      return l.Divide(r)
   end '/';

   operator {public} '/' (l : Tensor; r : N.Number) : Tensor;
   var
      x : N.Number;
   begin {locked}
      x := one.Divide(r);
      return l.Scale(x)
   end '/';

   operator {public} '/' (l : Tensor; r : Card8) : Tensor;
   var
      x : N.Number;
   begin {locked}
      x := one.Divide(N.Card8ToNumber(r));
      return l.Scale(x)
   end '/';

   operator {public} '/' (l : Tensor; r : Card16) : Tensor;
   var
      x : N.Number;
   begin {locked}
      x := one.Divide(N.Card16ToNumber(r));
      return l.Scale(x)
   end '/';

   operator {public} '/' (l : Tensor; r : Card32) : Tensor;
   var
      x : N.Number;
   begin {locked}
      x := one.Divide(N.Card32ToNumber(r));
      return l.Scale(x)
   end '/';

   operator {public} '/' (l : Tensor; r : Card64) : Tensor;
   var
      x : N.Number;
   begin {locked}
      x := one.Divide(N.Card64ToNumber(r));
      return l.Scale(x)
   end '/';

   operator {public} '/' (l : Tensor; r : Int8) : Tensor;
   var
      x : N.Number;
   begin {locked}
      x := one.Divide(N.Int8ToNumber(r));
      return l.Scale(x)
   end '/';

   operator {public} '/' (l : Tensor; r : Int16) : Tensor;
   var
      x : N.Number;
   begin {locked}
      x := one.Divide(N.Int16ToNumber(r));
      return l.Scale(x)
   end '/';

   operator {public} '/' (l : Tensor; r : Int32) : Tensor;
   var
      x : N.Number;
   begin {locked}
      x := one.Divide(N.Int32ToNumber(r));
      return l.Scale(x)
   end '/';

   operator {public} '/' (l : Tensor; r : Int64) : Tensor;
   var
      x : N.Number;
   begin {locked}
      x := one.Divide(N.Int64ToNumber(r));
      return l.Scale(x)
   end '/';

   operator {public} '/' (l : Tensor; r : Real32) : Tensor;
   var
      x : N.Number;
   begin {locked}
      x := one.Divide(N.Real32ToNumber(r));
      return l.Scale(x)
   end '/';

   operator {public} '/' (l : Tensor; r : Real64) : Tensor;
   var
      x : N.Number;
   begin {locked}
      x := one.Divide(N.Real64ToNumber(r));
      return l.Scale(x)
   end '/';

   (* tensor functions and procedures *)

   (* This is the Frobenius norm *)
   procedure {public} Norm (t : Tensor) : S.Scalar;
   var
      s : S.Scalar;
   begin
      s.Set(A.TwoNorm(t.GetArray()));
      s.SetUnits(t.GetUnits());
      return s
   end Norm;

   procedure {public} FirstInvariant (t : Tensor) : S.Scalar;
   var
      s : S.Scalar;
   begin
      s := t[1,1] + t[2,2];
      return s
   end FirstInvariant;

   procedure {public} SecondInvariant (t : Tensor) : S.Scalar;
   var
      s : S.Scalar;
   begin
      s := t[1,1]*t[2,2] - t[1,2]*t[2,1];
      return s
   end SecondInvariant;

   procedure {public} Trace (t : Tensor) : S.Scalar;
   begin
      return FirstInvariant(t)
   end Trace;

   procedure {public} Determinant (t : Tensor) : S.Scalar;
   begin
      return SecondInvariant(t)
   end Determinant;

   procedure {public} Transpose (t : Tensor) : Tensor;
   var
      tp : Tensor;
   begin
      tp.SetUnits(t.GetUnits());
      tp[1,1] := t[1,1];
      tp[1,2] := t[2,1];
      tp[2,1] := t[1,2];
      tp[2,2] := t[2,2];
      return tp
   end Transpose;

   procedure {public} SymmetricPart (t : Tensor) : Tensor;
   var
      ts : Tensor;
   begin
      ts.SetUnits(t.GetUnits());
      ts[1,1] := t[1,1];
      ts[1,2] := (t[1,2] + t[2,1])/twoScalar;
      ts[2,1] := ts[1,2];
      ts[2,2] := t[2,2];
      return ts
   end SymmetricPart;

   procedure {public} SkewPart (t : Tensor) : Tensor;
   var
      ts : Tensor;
   begin
      ts.SetUnits(t.GetUnits());
      ts[1,2] := (t[1,2] - t[2,1])/twoScalar;
      ts[2,1] := (t[2,1] - t[1,2])/twoScalar;
      return ts
   end SkewPart;

   procedure {public} Inverse (t : Tensor) : Tensor;
   var
      det, s : S.Scalar;
      inv : Tensor;
      r : N.Number;
      si : U.Si;
   begin
      si.Initialize;
      inv.SetUnits(si.Subtract(t.GetUnits()));
      det := SecondInvariant(t);
      r := M.Abs(det.Get());
      if r > zero then
         (* apply Cramer's rule *)
         inv[1,1] := t[2,2]/det;
         s := t[2,1]/det;
         inv[2,1] := -s;
         s := t[1,2]/det;
         inv[1,2] := -s;
         inv[2,2] := t[1,1]/det
      else
         L.WarningMessage(323,305, "BelCcm.Tensors2.Inverse")
      end;
      return inv
   end Inverse;

begin
   zero := 0.0E+0;
   one  := 1.0E+0;
   two  := 2.0E+0;
   oneScalar.Set(one);
   twoScalar.Set(two);
   I[1,1] := oneScalar;
   I[2,2] := oneScalar
end Tensors2.