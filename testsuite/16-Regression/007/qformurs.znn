definition{public} Graphical;
procedure MoveTo (newX, newY: integer);
procedure MoveBy (dx, dy: integer);
procedure Draw;
procedure Draw2;
end Graphical.

implementation Graphical;
var x, y: integer; (* object’s position *)

procedure MoveTo (newX, newY: integer);
begin
writeln("Graphical.MoveTo");
x := newX; y := newY
end MoveTo;

procedure MoveBy (dx, dy: integer);
begin
writeln("Graphical.MoveBy");
x := x + dx; y := y + dy
end MoveBy;

procedure{public} Draw implements Graphical.Draw;
begin
writeln("Graphical.Draw");
end Draw;

procedure{public} Draw2 implements Graphical.Draw2;
begin
end Draw2;

end Graphical.

definition Rectangle refines Graphical;
var width, height: integer;

procedure{public} Area(): integer;
end Rectangle.

object{ref} Box implements Rectangle;

procedure{public} Area(): integer implements Rectangle.Area;
begin
writeln("Box.Area");
end Area;

end Box.

module Test;
import Box;

var b: Box;

begin
b := new Box();
b.Area();
b := nil;
end Test.
