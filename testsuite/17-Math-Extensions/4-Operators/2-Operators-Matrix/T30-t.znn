(** 
 * 17. Math extensions.
 * 17.4.2. Matrix operators
 * 
 * Positive test: matrix multiplication
 * with scalar
 *)

module Main;

type vi = array {math} * of integer;
type vr = array {math} * of real;
type mi = array {math} *,* of integer;
type mr = array {math} *,* of real;
type vb = array {math} * of boolean;

var
	Ai, Bi, Ci : mi;
	ai, bi, ci : vi;
	Ar, Br, Cr : mr;
	ar, br, cr : vr;
	ab, bb, cb : vb;
	
	ii, ji : vi;
	ib, jb : vb;
	
	i, j : integer;
	k : integer;
  
begin
	  
	ai := [1,2];
	  
	Ai := [[1, 2, 4], [6, -1, 7]];  
	Bi := [[-3, 2], [5, -4]];  
	ai := [4, -3, 5];
	bi := [-2, 4, 7];
	
	ii := [0, 1, 0];
	ji := [0, 2, 1, 0];
	ib := [true, true];
	
	(*
	do
		k := ai[ii] * bi[ib];
	on IncompatibleSizes
	do
		halt(1);
	end;
	halt(0);
	*)
	
	k := ai[ii] * bi[ii];
	if (k # -28)
	then
		halt(0);
	else 
		halt(1);
	end;
	
	(*
	if (ci[0] # -10) or (ci[1] # 11) or (ci[2] # 19) or (ci[3] # -11)
	then
		halt(0);
	else 
		halt(1);
	end;
	*)
	(*
	for i := 0 to 1
	do
		for j := 0 to 1
		do
			if (Ai[i, j + 1] # Ci[j, i])
			then
				halt(0);
			end;
		end;
	end;
	*)
	
end Main.

