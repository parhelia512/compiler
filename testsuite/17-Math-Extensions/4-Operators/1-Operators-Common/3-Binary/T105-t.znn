(** 
 * 17. Math extensions.
 * 17.4. Operators
 * 17.4.2. Binary
 * 
 * Positive test: Binary generalized < + indexing
 * scalar + array
 *)

module Main;

type mi = array {math} *,* of integer;
type mr = array {math} *,* of real;
type mc = array {math} *,* of cardinal;
type mb = array {math} *,* of boolean;

type iind = array {math} * of integer;
type bind = array {math} * of boolean;


(******************************)
procedure {public} f1 (left : array {math} *,* of integer; right: integer; 
	left_n_r0: array {math} * of integer; left_n_r1: array {math} * of boolean ) : boolean;
var
	i0, i1, left_n0, left_n1, right_n0, right_n1, left_j1 : integer;
	res : boolean;
begin

    left_n0 := len(left_n_r0, 0);
    if ( len(left_n_r1, 0) # len(left, 1) )
    then
        
    end;

    for i0 := 0 to len(left_n_r1, 0) - 1
    do
		if ( left_n_r1[i0] )
        then
            left_n1 := left_n1 + 1;
        end;
    end;

    for i0 := 0 to left_n0 - 1
    do
		left_j1 := 0;
		for i1 := 0 to left_n1 - 1 
		do
			while ( ~left_n_r1[left_j1] ) 
			do
				left_j1 := left_j1 + 1;
			end;
			
			if right >= left[left_n_r0[i0], left_j1] 
			then
				return false;
			end;
			left_j1 := left_j1 + 1;
		end;
    end;

    return true;
end f1;
        
(******************************)        
procedure {public} f2 (left : array {math} *,* of integer; right: real; 
	left_n_r0: array {math} * of integer; 
	left_n_r1_from: integer; left_n_r1_wasToWritten: boolean; left_n_r1_to: integer; left_n_r1_by: integer ) : boolean;
var
	i0, i1, left_n0, left_n1, right_n0, right_n1, right_j1 : integer;
	res : boolean;
begin
    if ( ~left_n_r1_wasToWritten )
    then
        left_n_r1_to := integer(len(left,1) - 1);
    end;

    left_n0 := len(left_n_r0, 0);
    left_n1 := ((left_n_r1_to - left_n_r1_from) div left_n_r1_by) + 1;

    for i0 := 0 to left_n0 - 1
    do
		right_j1 := 0;
		for i1 := 0 to left_n1 - 1 
		do
			if right >= left[left_n_r0[i0], left_n_r1_from + (i1 * left_n_r1_by)]
			then
				return false;
			end;
		end;
    end;

    return true;
end f2;
(******************************)


var
	ai1 : array {math} 2, 3 of integer;
	ai2, ai3, ai3_prove : mi;
	ar1 : array {math} 2, 3 of real;
	ar2, ar3, ar4, ar3_prove : mr;
	ac1 : array {math} 2, 3 of cardinal;
	ac2, ac3, ac3_prove : mc;
	ab1, ab2, ab1_prove, ab2_prove : mb;
	
	bi1, bi2 : iind;
	bb1, bb2 : bind;
	r1, r2 : range;
	
	i, j : integer;
	
	ki : integer;
	kr : real;
	
	resb1, resb2, resb1_prove, resb2_prove : boolean;
	
begin	
	
	ai1 := [[-1, 2, -3], [4, -5, 6]];
	ai2 := [[-23, -24, 35], [-3, 25, 45]];
	ar1 := [[1.3, -2.1, 3.4], [-4.1, 5.2, -6.7]];

	
	bi1 := [1, 0, 1, 2];
	bi2 := [1, 0, 0];
	bb1 := [false, true, true];
	bb2 := [true, true, false];
	r1 := 1..2;
	r2 := 0..2 by 2;
	
	ki := 3;
	resb1 := ki < ai1[bi2, bb1];
	kr := 1.3;
	resb2 := kr < ai1[bi2, r2];
	
	resb1_prove := f1(ai1, ki, bi2, bb1);
	resb2_prove := f2(ai1, kr, bi2, 0, true, 2, 2);
	
	if (resb1 # resb1_prove)
	then
		halt(0);
	end;
	
	if (resb2 # resb2_prove)
	then
		halt(0);
	end;

	halt(1);
	
end Main.
