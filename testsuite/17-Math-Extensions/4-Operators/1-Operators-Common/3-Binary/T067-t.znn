(** 
 * 17. Math extensions.
 * 17.4. Operators
 * 17.4.2. Binary
 * 
 * Positive test: Binary div + indexing
 * array + array
 *)

module Main;

type mi = array {math} *,* of integer;
type mr = array {math} *,* of real;
type mc = array {math} *,* of cardinal;

type iind = array {math} * of integer;
type bind = array {math} * of boolean;


(******************************)
procedure {public} f1 (left : array {math} *,* of integer; right: array {math} *,* of integer; 
	left_n_r0: array {math} * of integer; left_n_r1: array {math} * of boolean; 
	right_n_r0: array {math} * of integer;
	right_n_r1_from: integer; right_n_r1_wasToWritten: boolean; right_n_r1_to: integer; right_n_r1_by: integer ) : mi;
var
	i0, i1, left_n0, left_n1, right_n0, right_n1, left_j1 : integer;
	res : mi;
begin
    if ( ~right_n_r1_wasToWritten )
    then
        right_n_r1_to := integer(len(right,1) - 1);
    end;

    left_n0 := len(left_n_r0, 0);
    if ( len(left_n_r1, 0) # len(left, 1) )
    then
        return nil;
    end;

    for i0 := 0 to len(left_n_r1, 0) - 1
    do
		if ( left_n_r1[i0] )
        then
            left_n1 := left_n1 + 1;
        end;
    end;

    right_n0 := len(right_n_r0, 0);
    right_n1 := ((right_n_r1_to - right_n_r1_from) div right_n_r1_by) + 1;
    if ( left_n0 # right_n0 )
    then
        return nil;
    end;

    if ( left_n1 # right_n1 )
    then
        return nil;
    end;

    res := new mi(left_n0,left_n1);

    for i0 := 0 to left_n0 - 1
    do
		left_j1 := 0;
		for i1 := 0 to left_n1 - 1 
		do
			while ( ~left_n_r1[left_j1] ) 
			do
				left_j1 := left_j1 + 1;
			end;

			res[i0,i1] := left[left_n_r0[i0], left_j1]
				div right[right_n_r0[i0], right_n_r1_from + (i1 * right_n_r1_by)];
			left_j1 := left_j1 + 1;
		end;
    end;

    return res;
end f1;
        
(******************************)        
procedure {public} f2 (left : array {math} *,* of integer; right: array {math} *,* of real; 
	left_n_r0: array {math} * of integer; 
	left_n_r1_from: integer; left_n_r1_wasToWritten: boolean; left_n_r1_to: integer; left_n_r1_by: integer;
	right_n_r0: array {math} * of integer;
	right_n_r1: array {math} * of boolean ) : mr;
var
	i0, i1, left_n0, left_n1, right_n0, right_n1, right_j1 : integer;
	res : mr;
begin
    if ( ~left_n_r1_wasToWritten )
    then
        left_n_r1_to := integer(len(left,1) - 1);
    end;

    left_n0 := len(left_n_r0, 0);
    left_n1 := ((left_n_r1_to - left_n_r1_from) div left_n_r1_by) + 1;
    right_n0 := len(right_n_r0, 0);
    if ( len(right_n_r1, 0) # len(right, 1) )
	then
		return nil;
	end;

    for i0 := 0 to len(right_n_r1, 0) - 1
    do
		if ( right_n_r1[i0] )
        then
            right_n1 := right_n1 + 1;
        end;
    end;

    if ( left_n0 # right_n0 )
    then
        return nil;
    end;

    if ( left_n1 # right_n1 )
    then
        return nil;
    end;

    res := new mr(left_n0,left_n1);

    for i0 := 0 to left_n0 - 1
    do
		right_j1 := 0;
		for i1 := 0 to left_n1 - 1 
		do
			while ( ~right_n_r1[right_j1] ) 
			do
				right_j1 := right_j1 + 1;
			end;

			res[i0,i1] := left[left_n_r0[i0], left_n_r1_from + (i1 * left_n_r1_by)] 
				/ right[right_n_r0[i0],right_j1];
			right_j1 := right_j1 + 1;
		end;
    end;

    return res;
end f2;
(******************************)


var
	ai1 : array {math} 2, 3 of integer;
	ai2, ai3, ai3_prove : mi;
	ar1 : array {math} 2, 3 of real;
	ar2, ar3, ar4, ar3_prove : mr;
	ac1 : array {math} 2, 3 of cardinal;
	ac2, ac3, ac3_prove : mc;
	
	bi1, bi2 : iind;
	bb1, bb2 : bind;
	r1, r2 : range;
	
	i, j : integer;
	
begin	
	
	ai1 := [[-1, 2, -3], [4, -5, 6]];
	ai2 := [[-23, -24, 35], [-3, 25, 45]];
	ar1 := [[1.3, -2.1, 3.4], [-4.1, 5.2, -6.7]];
	ar2 := [[6.1, +3.8, 2.6], [+4.1, -5.1, -3.1]];
	ac1 := [[1, 2, 3], [4, 5, 6]];
	ac2 := [[4, 3, 1], [8, 2, 16]];
	
	bi1 := [1, 0, 1, 2];
	bi2 := [1, 0, 0];
	bb1 := [false, true, true];
	bb2 := [true, true, false];
	r1 := 1..2;
	r2 := 0..2 by 2;
	
	
	ai3 := ai1[bi2, bb1] div ai2[bi2, r1];
	ar3 := ai1[bi2, r2] ./ ar1[bi2, bb2];
	
	ai3_prove := f1(ai1, ai2, bi2, bb1, bi2, 1, true, 2, 1);
	ar3_prove := f2(ai1, ar1, bi2, 0, true, 2, 2, bi2, bb2);
	
	if (len(ai3, 0) # len(ai3_prove, 0)) or (len(ai3, 1) # len(ai3_prove, 1))
	then
		halt(0);
	end;
	
	for i := 0 to len(ai3, 0) - 1
	do
		for j := 0 to len(ai3, 1) - 1
		do
			if ai3[i, j] # ai3_prove[i, j] 
			then 
				halt(0);
			end;
		end;
	end;
	
	if (len(ar3, 0) # len(ar3_prove, 0)) or (len(ar3, 1) # len(ar3_prove, 1))
	then
		halt(0);
	end;
	
	for i := 0 to len(ar3, 0) - 1
	do
		for j := 0 to len(ar3, 1) - 1
		do
			if ar3[i, j] # ar3_prove[i, j]
			then 
				halt(0);
			end;
		end;
	end;

	halt(1);
	
end Main.
	